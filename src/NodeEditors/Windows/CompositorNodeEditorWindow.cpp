//-- includes -----
#include "CompositorNodeEditorWindow.h"
#include "GlFrameCompositor.h"
#include "GlRenderModelResource.h"
#include "GlTexture.h"
#include "GlTriangulatedMesh.h"
#include "Delegate.h"
#include "Logger.h"

#include "ModelAssetReference.h"
#include "MaterialAssetReference.h"
#include "TextureAssetReference.h"

#include "Graphs/CompositorNodeGraph.h"
#include "Nodes/Node.h"
#include "Nodes/DrawTriMeshNode.h"
#include "Nodes/TextureNode.h"
#include "Pins/NodePin.h"
#include "Properties/GraphArrayProperty.h"

// Autogenerated header containing Unicode Icon IDs from "forkawesome-webfont.ttf"
#include "IconsForkAwesome.h"

#include "tinyfiledialogs.h" // Cross-platform file dialogs library

CompositorNodeEditorWindow::CompositorNodeEditorWindow() : NodeEditorWindow()
{
	m_assetRefFactoryList.push_back(AssetReferenceFactory::create<ModelAssetReferenceFactory>());
	m_assetRefFactoryList.push_back(AssetReferenceFactory::create<MaterialAssetReferenceFactory>());
	m_assetRefFactoryList.push_back(AssetReferenceFactory::create<TextureAssetReferenceFactory>());
}

CompositorNodeEditorWindow::~CompositorNodeEditorWindow()
{
}

void CompositorNodeEditorWindow::update(float deltaSeconds)
{
	NodeEditorWindow::update(deltaSeconds);
}

NodeGraphPtr CompositorNodeEditorWindow::allocateNodeGraph()
{
	return std::make_shared<CompositorNodeGraph>();
}

void CompositorNodeEditorWindow::onNodeGraphCreated()
{
	NodeEditorWindow::onNodeGraphCreated();

	m_materialArrayProperty = m_nodeGraph->getTypedPropertyByName<MaterialArrayProperty>("materials");
	m_modelResourceArrayProperty = m_nodeGraph->getTypedPropertyByName<ModelResourceArrayProperty>("models");
	m_textureArrayProperty = m_nodeGraph->getTypedPropertyByName<TextureArrayProperty>("textures");
}

void CompositorNodeEditorWindow::onNodeGraphDeleted()
{
	m_modelResourceArrayProperty= nullptr;
	m_textureArrayProperty= nullptr;

	NodeEditorWindow::onNodeGraphDeleted();
}

void CompositorNodeEditorWindow::renderToolbar()
{
	ImGui::PushFont(m_BigIconFont);

	ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(8, 4));
	ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(12, 4));
	ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0);
	ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0.13f, 0.13f, 0.13f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_ButtonActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_Separator, ImVec4(0.0f, 0.0f, 0.0f, 0.5f));

	ImGui::BeginChild("Toolbar", ImVec2(ImGui::GetContentRegionAvail().x, 40));

	ImGui::SetCursorPosY((ImGui::GetWindowHeight() - 30) * 0.5f);
	if (ImGui::Button(ICON_FK_FLOPPY_O "   Save", ImVec2(0, 30)))
	{
		// TODO 
	}

	// Editor Control
	{
		ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 4.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(4, 4));
		ImGui::PushStyleColor(ImGuiCol_ChildBg, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_Border, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));

		ImGui::SameLine();
		ImGui::BeginChild("EditorControl", ImVec2(70, 30), true, ImGuiWindowFlags_NoScrollbar);
		ImGui::SetCursorPosY((ImGui::GetWindowHeight() - ImGui::GetTextLineHeight()) * 0.5f);

		if (m_IsPlaying)
		{
			ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 0.3f, 0.3f, 1.0f));
			if (ImGui::SmallButton(ICON_FK_STOP))
				m_IsPlaying = false;
		}
		else
		{
			ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.5f, 0.8f, 0.5f, 1.0f));
			if (ImGui::SmallButton(ICON_FK_PLAY))
			{
				m_OnInit = true;
				m_IsPlaying = true;
			}
		}
		ImGui::PopStyleColor();

		ImGui::SameLine();
		ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.9f, 0.9f, 0.9f, 1.0f));
		if (ImGui::SmallButton(ICON_FK_UNDO))
			m_OnInit = true;
		ImGui::PopStyleColor();

		ImGui::EndChild();
		ImGui::PopStyleColor(3);
		ImGui::PopStyleVar(2);
	}

	ImGui::EndChild();

	ImGui::PopStyleVar(3);
	ImGui::PopStyleColor(4);

	ImGui::PopFont();
}

void CompositorNodeEditorWindow::renderGraphVariablesPanel()
{
	ImGui::BeginChild("Left Panel", ImVec2(200, ImGui::GetContentRegionAvail().y));

	// Model Resources
	{
		auto& triMeshArray = m_modelResourceArrayProperty->getArray();

		// Add button
		float xPos = ImGui::GetCursorPosX();
		ImGui::SetCursorPosX(180);
		if (ImGui::SmallButton(ICON_FK_PLUS_CIRCLE "##add_model_resource"))
		{
			ImNodes::ClearLinkSelection();
			ImNodes::ClearNodeSelection();

			//TODO: Allocate empty triangulated mesh
			std::string name = "Tri Mesh: " + std::to_string(triMeshArray.size() + 1);
			const GlVertexDefinition* vertexDefinition= GlFrameCompositor::getStencilModelVertexDefinition();
			GlRenderModelResourcePtr modelResource= std::make_shared<GlRenderModelResource>(vertexDefinition);
			addModelResource(modelResource);

			m_SelectedItemType = SelectedItemType::MODEL;
			m_SelectedItemId = (int)triMeshArray.size() - 1;
		}
		ImGui::SameLine();
		ImGui::SetCursorPosX(xPos);

		// Title bar
		ImGui::SetNextItemOpen(true, ImGuiCond_Once);
		ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 4));
		ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 0.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0.0f);
		ImGui::PushStyleColor(ImGuiCol_Header, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		bool isNodeOpened = ImGui::CollapsingHeader("TRIANGULATED MESHES", ImGuiTreeNodeFlags_SpanAvailWidth);
		ImGui::SameLine();
		ImGui::SetCursorPosX(180);
		ImGui::Text(ICON_FK_PLUS_CIRCLE);
		ImGui::PopStyleVar(3);
		ImGui::PopStyleColor(3);

		if (isNodeOpened)
		{
			ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.25f, 0.25f, 0.25f, 0.4f));
			for (int i = 0; i < triMeshArray.size(); i++)
			{
				// Item
				std::string name = "\t\t" + triMeshArray[i]->getName();
				name += "##trimesh" + std::to_string(i);
				bool isSelected = m_SelectedItemType == SelectedItemType::MODEL;
				isSelected = isSelected && (m_SelectedItemId == i);
				if (ImGui::Selectable(name.c_str(), &isSelected))
				{
					ImNodes::ClearLinkSelection();
					ImNodes::ClearNodeSelection();
					if (isSelected)
					{
						m_SelectedItemType = SelectedItemType::MODEL;
						m_SelectedItemId = i;
					}
					else
					{
						m_SelectedItemType = SelectedItemType::NONE;
						m_SelectedItemId = -1;
					}
				}
				if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))
				{
					ImGui::SetDragDropPayload("tri_mesh", &i, sizeof(int));
					ImGui::Text(triMeshArray[i]->getName().c_str());
					ImGui::EndDragDropSource();
				}

				// Context menu
				ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(4, 4));
				ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(12, 6));
				ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(14, 4));
				ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.1f, 0.4f, 0.9f, 1.0f));
				ImGui::PushStyleColor(ImGuiCol_PopupBg, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
				if (ImGui::BeginPopupContextItem())
				{
					ImNodes::ClearLinkSelection();
					ImNodes::ClearNodeSelection();
					m_SelectedItemType = SelectedItemType::MODEL;
					m_SelectedItemId = i;

					if (ImGui::MenuItem("Delete", ICON_FK_TRASH, "DELETE"))
						deleteSelectedItem();

					ImGui::EndPopup();
				}
				ImGui::PopStyleColor(2);
				ImGui::PopStyleVar(3);
			}
			ImGui::PopStyleColor();
		}
	}

	ImGui::EndChild();
}

void CompositorNodeEditorWindow::renderSelectedObjectPanel()
{
	ImGui::SameLine();
	ImGui::BeginChild("Right Panel", ImVec2(344, ImGui::GetContentRegionAvail().y));

	if (m_SelectedItemType == SelectedItemType::NODE)
	{
		NodePtr node = m_nodeGraph->getNodeById(m_SelectedItemId);

		if (node)
		{
			node->editorRenderPropertySheet(m_editorState);
		}
	}
	else if (m_SelectedItemType == SelectedItemType::TEXTURE)
	{
		//TODO
	}
	else if (m_SelectedItemType == SelectedItemType::MODEL)
	{
		// Section 1: Basic info
		ImGui::SetNextItemOpen(true, ImGuiCond_Once);
		ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 4));
		ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 0.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0.0f);
		ImGui::PushStyleColor(ImGuiCol_Header, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		bool isNodeOpened = ImGui::CollapsingHeader("Tri Mesh", ImGuiTreeNodeFlags_SpanAvailWidth);
		ImGui::PopStyleVar(3);
		ImGui::PopStyleColor(3);

		if (isNodeOpened)
		{
			// Name
			ImGui::Text("\t\tName");
			ImGui::SameLine(160);
			ImGui::SetNextItemWidth(150);
			GlRenderModelResourcePtr modelResource = m_modelResourceArrayProperty->getArray()[m_SelectedItemId];
			std::string name = modelResource->getName();
			ImGui::Text(name.c_str());
		}

		// Section 2: Shaders
		// Add Button
		float xPos = ImGui::GetCursorPosX();
		ImGui::SetCursorPosX(325);
		if (ImGui::SmallButton(ICON_FK_PLUS_CIRCLE "##set_mesh"))
		{
		#if 0
			auto paths_c = tinyfd_openFileDialog("Add Shader", "", 0, 0, 0, 1);
			if (paths_c)
			{
				std::stringstream ssPaths(paths_c);
				std::string path;
				while (std::getline(ssPaths, path, '|'))
					m_Programs[m_SelectedItemId]->AddShader(
						PathUtils::makeUniversalPathString(path).c_str(),
						GL_VERTEX_SHADER);
			}
		#endif
		}
	}

	ImGui::EndChild();
}

void CompositorNodeEditorWindow::renderDragDrop(const class NodeEditorState& editorState)
{
	if (auto payload = ImGui::AcceptDragDropPayload("Model"))
	{
		IM_ASSERT(payload->DataSize == sizeof(GlRenderModelResourcePtr*));
		GlRenderModelResourcePtr model = *(GlRenderModelResourcePtr*)payload->Data;

		auto triMeshNode =
			std::static_pointer_cast<DrawTriMeshNode>(
				DrawTriMeshNodeFactory(m_nodeGraph).createNode(&editorState));
		triMeshNode->setModel(model);
	}
	else if (auto payload = ImGui::AcceptDragDropPayload("Material"))
	{
		IM_ASSERT(payload->DataSize == sizeof(GlMaterialPtr*));
		GlMaterialPtr material = *(GlMaterialPtr*)payload->Data;

		auto triMeshNode =
			std::static_pointer_cast<DrawTriMeshNode>(
				DrawTriMeshNodeFactory(m_nodeGraph).createNode(&editorState));
		triMeshNode->setMaterial(material);
	}
	else if (auto payload = ImGui::AcceptDragDropPayload("Texture"))
	{
		IM_ASSERT(payload->DataSize == sizeof(GlTexturePtr*));
		GlTexturePtr texture = *(GlTexturePtr*)payload->Data;

		auto textureNode =
			std::static_pointer_cast<TextureNode>(
				TextureNodeFactory(m_nodeGraph).createNode(&editorState));
		textureNode->setTexture(texture);
	}
}

void CompositorNodeEditorWindow::deleteSelectedItem()
{
	NodeEditorWindow::deleteSelectedItem();

	if (m_SelectedItemType == SelectedItemType::MODEL)
	{
		deleteModelResource(m_SelectedItemId);

		m_SelectedItemType = SelectedItemType::NONE;
		m_SelectedItemId = -1;
	}
	else if (m_SelectedItemType == SelectedItemType::MATERIAL)
	{
		deleteMaterialResource(m_SelectedItemId);

		m_SelectedItemType = SelectedItemType::NONE;
		m_SelectedItemId = -1;
	}
	else if (m_SelectedItemType == SelectedItemType::TEXTURE)
	{
		deleteTexture(m_SelectedItemId);

		m_SelectedItemType = SelectedItemType::NONE;
		m_SelectedItemId = -1;
	}
}

void CompositorNodeEditorWindow::addMaterialResource(GlMaterialPtr material)
{
	if (m_materialArrayProperty)
	{
		m_materialArrayProperty->getArrayMutable().push_back(material);
		m_materialArrayProperty->notifyPropertyModified();
	}
}

void CompositorNodeEditorWindow::deleteMaterialResource(int ix)
{
	if (m_materialArrayProperty)
	{
		auto materialArray = m_materialArrayProperty->getArrayMutable();

		if (ix >= 0 && ix < (int)materialArray.size())
		{
			materialArray.erase(materialArray.begin() + ix);
			m_materialArrayProperty->notifyPropertyModified();
		}
	}
}

void CompositorNodeEditorWindow::addModelResource(GlRenderModelResourcePtr modelResource)
{
	if (m_modelResourceArrayProperty)
	{
		m_modelResourceArrayProperty->getArrayMutable().push_back(modelResource);
		m_modelResourceArrayProperty->notifyPropertyModified();
	}
}

void CompositorNodeEditorWindow::deleteModelResource(int ix)
{
	if (m_modelResourceArrayProperty)
	{
		auto triMeshArray = m_modelResourceArrayProperty->getArrayMutable();

		if (ix >= 0 && ix < (int)triMeshArray.size())
		{
			triMeshArray.erase(triMeshArray.begin() + ix);
			m_modelResourceArrayProperty->notifyPropertyModified();
		}
	}
}

void CompositorNodeEditorWindow::addTexture(GlTexturePtr pTex)
{
	if (m_textureArrayProperty)
	{
		m_textureArrayProperty->getArrayMutable().push_back(pTex);
		m_textureArrayProperty->notifyPropertyModified();
	}
}

void CompositorNodeEditorWindow::deleteTexture(int ix)
{
	if (m_textureArrayProperty)
	{
		auto textureArray = m_textureArrayProperty->getArrayMutable();

		if (ix >= 0 && ix < (int)textureArray.size())
		{
			textureArray.erase(textureArray.begin() + ix);
			m_textureArrayProperty->notifyPropertyModified();
		}
	}
}