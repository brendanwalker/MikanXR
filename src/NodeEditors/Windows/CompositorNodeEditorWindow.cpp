//-- includes -----
#include "CompositorNodeEditorWindow.h"
#include "GlFrameCompositor.h"
#include "GlRenderModelResource.h"
#include "GlTexture.h"
#include "GlTriangulatedMesh.h"
#include "Delegate.h"
#include "Logger.h"

#include "ModelAssetReference.h"
#include "MaterialAssetReference.h"
#include "TextureAssetReference.h"

#include "Graphs/CompositorNodeGraph.h"
#include "Nodes/Node.h"
#include "Nodes/DrawTriMeshNode.h"
#include "Nodes/TextureNode.h"
#include "Pins/NodePin.h"
#include "Properties/GraphArrayProperty.h"

// Autogenerated header containing Unicode Icon IDs from "forkawesome-webfont.ttf"
#include "IconsForkAwesome.h"

#include "tinyfiledialogs.h" // Cross-platform file dialogs library

CompositorNodeEditorWindow::CompositorNodeEditorWindow() : NodeEditorWindow()
{
	m_assetRefFactoryList.push_back(AssetReferenceFactory::create<ModelAssetReferenceFactory>());
	m_assetRefFactoryList.push_back(AssetReferenceFactory::create<MaterialAssetReferenceFactory>());
	m_assetRefFactoryList.push_back(AssetReferenceFactory::create<TextureAssetReferenceFactory>());
}

CompositorNodeEditorWindow::~CompositorNodeEditorWindow()
{
}

void CompositorNodeEditorWindow::update(float deltaSeconds)
{
	NodeEditorWindow::update(deltaSeconds);
}

NodeGraphPtr CompositorNodeEditorWindow::allocateNodeGraph()
{
	return std::make_shared<CompositorNodeGraph>();
}

void CompositorNodeEditorWindow::onNodeGraphCreated()
{
	NodeEditorWindow::onNodeGraphCreated();
}

void CompositorNodeEditorWindow::onNodeGraphDeleted()
{
	NodeEditorWindow::onNodeGraphDeleted();
}

void CompositorNodeEditorWindow::renderToolbar()
{
	ImGui::PushFont(m_BigIconFont);

	ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(8, 4));
	ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(12, 4));
	ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0);
	ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0.13f, 0.13f, 0.13f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_ButtonActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_Separator, ImVec4(0.0f, 0.0f, 0.0f, 0.5f));

	ImGui::BeginChild("Toolbar", ImVec2(ImGui::GetContentRegionAvail().x, 40));

	ImGui::SetCursorPosY((ImGui::GetWindowHeight() - 30) * 0.5f);
	if (ImGui::Button(ICON_FK_FLOPPY_O "   Save", ImVec2(0, 30)))
	{
		// TODO 
	}

	// Editor Control
	{
		ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 4.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(4, 4));
		ImGui::PushStyleColor(ImGuiCol_ChildBg, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_Border, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));

		ImGui::SameLine();
		ImGui::BeginChild("EditorControl", ImVec2(70, 30), true, ImGuiWindowFlags_NoScrollbar);
		ImGui::SetCursorPosY((ImGui::GetWindowHeight() - ImGui::GetTextLineHeight()) * 0.5f);

		if (m_IsPlaying)
		{
			ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 0.3f, 0.3f, 1.0f));
			if (ImGui::SmallButton(ICON_FK_STOP))
				m_IsPlaying = false;
		}
		else
		{
			ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.5f, 0.8f, 0.5f, 1.0f));
			if (ImGui::SmallButton(ICON_FK_PLAY))
			{
				m_OnInit = true;
				m_IsPlaying = true;
			}
		}
		ImGui::PopStyleColor();

		ImGui::SameLine();
		ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.9f, 0.9f, 0.9f, 1.0f));
		if (ImGui::SmallButton(ICON_FK_UNDO))
			m_OnInit = true;
		ImGui::PopStyleColor();

		ImGui::EndChild();
		ImGui::PopStyleColor(3);
		ImGui::PopStyleVar(2);
	}

	ImGui::EndChild();

	ImGui::PopStyleVar(3);
	ImGui::PopStyleColor(4);

	ImGui::PopFont();
}

void CompositorNodeEditorWindow::renderDragDrop(const class NodeEditorState& editorState)
{
	if (auto payload = ImGui::AcceptDragDropPayload("Model"))
	{
		IM_ASSERT(payload->DataSize == sizeof(GlRenderModelResourcePtr*));
		GlRenderModelResourcePtr model = *(GlRenderModelResourcePtr*)payload->Data;

		auto triMeshNode =
			std::static_pointer_cast<DrawTriMeshNode>(
				DrawTriMeshNodeFactory(m_nodeGraph).createNode(&editorState));
		triMeshNode->setModel(model);
	}
	else if (auto payload = ImGui::AcceptDragDropPayload("Material"))
	{
		IM_ASSERT(payload->DataSize == sizeof(GlMaterialPtr*));
		GlMaterialPtr material = *(GlMaterialPtr*)payload->Data;

		auto triMeshNode =
			std::static_pointer_cast<DrawTriMeshNode>(
				DrawTriMeshNodeFactory(m_nodeGraph).createNode(&editorState));
		triMeshNode->setMaterial(material);
	}
	else if (auto payload = ImGui::AcceptDragDropPayload("Texture"))
	{
		IM_ASSERT(payload->DataSize == sizeof(GlTexturePtr*));
		GlTexturePtr texture = *(GlTexturePtr*)payload->Data;

		auto textureNode =
			std::static_pointer_cast<TextureNode>(
				TextureNodeFactory(m_nodeGraph).createNode(&editorState));
		textureNode->setTexture(texture);
	}
}