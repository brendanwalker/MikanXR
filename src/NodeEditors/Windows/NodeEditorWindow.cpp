//-- includes -----
#include "NodeEditorWindow.h"
#include "Logger.h"

#include "GlCommon.h"
#include "GlBufferBlock.h"
#include "GlUniformBlock.h"
#include "GlFrameBuffer.h"
#include "GlProgram.h"
#include "GlStateStack.h"
#include "GlShaderCache.h"
#include "GlShaderVar.h"
#include "GlTexture.h"
#include "EditorNode.h"
#include "EditorNodeConstants.h"
#include "EditorNodeUtil.h"
#include "EditorPin.h"
#include "MathGLM.h"
#include "Graphs/NodeGraph.h"
#include "Graphs/NodeEvaluator.h"
#include "Nodes/Node.h"
#include "SdlManager.h"
#include "SdlWindow.h"
#include "TextStyle.h"

#include "Pins/NodePin.h"
#include "Properties/GraphArrayProperty.h"

#include "imgui.h"
#include "misc/cpp/imgui_stdlib.h"
#include "backends/imgui_impl_sdl.h"
#include "backends/imgui_impl_opengl3.h"

#include "imnodes.h"
// Autogenerated header containing Unicode Icon IDs from "forkawesome-webfont.ttf"
#include "IconsForkAwesome.h"

#include "tinyfiledialogs.h" // Cross-platform file dialogs library

#include <easy/profiler.h>

//-- public methods -----
NodeEditorWindow::NodeEditorWindow()
	: m_sdlWindow(SdlWindowUniquePtr(new SdlWindow))
	, m_glStateStack(GlStateStackUniquePtr(new GlStateStack))
	, m_shaderCache(GlShaderCacheUniquePtr(new GlShaderCache))
{}

NodeEditorWindow::~NodeEditorWindow()
{
}

GlLineRenderer* NodeEditorWindow::getLineRenderer()
{
	return nullptr;
}

GlTextRenderer* NodeEditorWindow::getTextRenderer()
{
	return nullptr;
}

GlStateStack& NodeEditorWindow::getGlStateStack()
{
	return *m_glStateStack.get();
}

bool NodeEditorWindow::startup()
{
	EASY_FUNCTION();

	bool success = true;

	MIKAN_LOG_INFO("NodeEditorWindow::init()") << "Initializing NodeEditorWindow";

	static const int k_node_window_pixel_width = 1080;
	static const int k_node_window_pixel_height = 720;

	auto windowTitle = "Node Editor";
	m_sdlWindow
		->setTitle(windowTitle)
		->setSize(k_node_window_pixel_width, k_node_window_pixel_height);
	if (!m_sdlWindow->startup())
	{
		MIKAN_LOG_ERROR("NodeEditorWindow::startup") << "Unable to initialize main SDK window: ";
		success = false;
	}

	// Setup ImGui context
	if (success)
	{
		// Setup ImGui context
		IMGUI_CHECKVERSION();
		m_imguiContext = ImGui::CreateContext();
		if (m_imguiContext != NULL)
		{
			configImGui();
		}
		else
		{
			MIKAN_LOG_ERROR("NodeEditorWindow::startup") << "Unable to create imgui context";
			success = false;
		}
	}

	// Setup ImGui SDL backend
	if (success)
	{
		if (ImGui_ImplSDL2_InitForOpenGL(
			m_sdlWindow->getInternalSdlWindow(),
			m_sdlWindow->getInternalGlContext()))
		{
			m_imguiSDLBackendInitialised= true;
		}
		else
		{
			MIKAN_LOG_ERROR("NodeEditorWindow::startup") << "Unable to initialize imgui SDL backend";
			success = false;
		}
	}

	// Setup ImGui OpenGL backend
	const std::string& glsl_version= SdlManager::getInstance()->getGlslVersion();
	if (success)
	{
		if (ImGui_ImplOpenGL3_Init(glsl_version.c_str()))
		{
			m_imguiOpenGLBackendInitialised= true;
		}
		else
		{
			MIKAN_LOG_ERROR("NodeEditorWindow::startup") << "Unable to initialize imgui openGL backend";
			success = false;
		}
	}

	// Setup the ImNodes context
	if (success)
	{
		m_imnodesContext = ImNodes::CreateContext();
		if (m_imnodesContext != nullptr)
		{
			configImNodes();
		}
		else
		{
			MIKAN_LOG_ERROR("NodeEditorWindow::startup") << "Unable to create imnodes context";
			success = false;
		}
	}

	if (success && !m_shaderCache->startup())
	{
		MIKAN_LOG_ERROR("NodeEditorWindow::startup") << "Failed to initialize shader cache!";
		success = false;
	}

	if (success)
	{
		static const glm::vec4 k_clear_color = glm::vec4(0.45f, 0.45f, 0.5f, 1.f);

		glClearColor(k_clear_color.r, k_clear_color.g, k_clear_color.b, k_clear_color.a);
		glViewport(0, 0, m_sdlWindow->getWidth(), m_sdlWindow->getHeight());

		// Set default state flags at the base of the stack
		m_glStateStack->pushState()
			.enableFlag(eGlStateFlagType::light0)
			.enableFlag(eGlStateFlagType::texture2d)
			.enableFlag(eGlStateFlagType::depthTest)
			.disableFlag(eGlStateFlagType::cullFace)
			// This has to be enabled since the point drawing shader will use gl_PointSize.
			.enableFlag(eGlStateFlagType::programPointSize);
	}

	if (success)
	{
		// TODO: Use node graph assigned to this window
		m_nodeGraph = std::make_shared<NodeGraph>();
		m_nodeGraph->OnLinkDeleted+= MakeDelegate(this, &NodeEditorWindow::onLinkDeleted);

		m_frameBufferArrayProperty = m_nodeGraph->getTypedPropertyByName<FrameBufferArrayProperty>("framebuffers");
	}

	return success;
}

void NodeEditorWindow::update(float deltaSeconds)
{
	EASY_FUNCTION();

	NodeEvaluator evaluator = {};
	evaluator
		.setCurrentWindow(this)
		.setDeltaSeconds(deltaSeconds);

	m_nodeGraph->update(evaluator);
}

void NodeEditorWindow::render()
{
	EASY_FUNCTION();

	// Clear the window
	m_sdlWindow->renderBegin();

	// Tell ImGui to prepare for a new frame
	ImGui_ImplOpenGL3_NewFrame();
	ImGui_ImplSDL2_NewFrame();
	ImGui::NewFrame();

	// Draw the current state if the editor window
	m_isRenderingUI = true;
	renderUI();
	m_isRenderingUI = false;

	// Tell ImGui to render the UI draw commands to the GL context
	ImGui::Render();
	glViewport(0, 0, (int)getWidth(), (int)getHeight());
	ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

	// Call SDL_GL_SwapWindow
	m_sdlWindow->renderEnd();
}


void NodeEditorWindow::renderUI()
{
	pushImGuiStyles();

	ImGui::SetNextWindowSize(ImVec2(getWidth(), getHeight()), ImGuiCond_Once);
	ImGui::Begin("Node Editor");

		// Toolbar
		renderToolbar();

		// Left Panel
		renderLeftPanel();

		ImGui::SameLine();
		ImGui::BeginChild("Main Panel", ImVec2(ImGui::GetContentRegionAvail().x - 350,
											   ImGui::GetContentRegionAvail().y));
			// Main Frame
			renderMainFrame();

			// Bottom Panel
			renderBottomPanel();

		ImGui::EndChild();

		// Right Panel
		renderRightPanel();

	ImGui::End();

	popImGuiStyles();
}

void NodeEditorWindow::renderToolbar()
{
	ImGui::PushFont(m_BigIconFont);

	ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(8, 4));
	ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(12, 4));
	ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0);
	ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0.13f, 0.13f, 0.13f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_ButtonActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_Separator, ImVec4(0.0f, 0.0f, 0.0f, 0.5f));

	ImGui::BeginChild("Toolbar", ImVec2(ImGui::GetContentRegionAvail().x, 40));

	ImGui::SetCursorPosY((ImGui::GetWindowHeight() - 30) * 0.5f);
	if (ImGui::Button(ICON_FK_FLOPPY_O "   Save", ImVec2(0, 30)))
	{
		// TODO Serializing the hole thing seems imposible...
	}

	// Editor Control
	{
		ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 4.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(4, 4));
		ImGui::PushStyleColor(ImGuiCol_ChildBg, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_Border, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));

		ImGui::SameLine();
		ImGui::BeginChild("EditorControl", ImVec2(70, 30), true, ImGuiWindowFlags_NoScrollbar);
		ImGui::SetCursorPosY((ImGui::GetWindowHeight() - ImGui::GetTextLineHeight()) * 0.5f);

		if (m_IsPlaying)
		{
			ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 0.3f, 0.3f, 1.0f));
			if (ImGui::SmallButton(ICON_FK_STOP))
				m_IsPlaying = false;
		}
		else
		{
			ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.5f, 0.8f, 0.5f, 1.0f));
			if (ImGui::SmallButton(ICON_FK_PLAY))
			{
				m_OnInit = true;
				m_IsPlaying = true;
			}
		}
		ImGui::PopStyleColor();

		ImGui::SameLine();
		ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.9f, 0.9f, 0.9f, 1.0f));
		if (ImGui::SmallButton(ICON_FK_UNDO))
			m_OnInit = true;
		ImGui::PopStyleColor();

		ImGui::EndChild();
		ImGui::PopStyleColor(3);
		ImGui::PopStyleVar(2);
	}

	ImGui::EndChild();

	ImGui::PopStyleVar(3);
	ImGui::PopStyleColor(4);

	ImGui::PopFont();
}

void NodeEditorWindow::renderLeftPanel()
{
	ImGui::BeginChild("Left Panel", ImVec2(200, ImGui::GetContentRegionAvail().y));

	// Programs
	{
		// Add button
		float xPos = ImGui::GetCursorPosX();
		ImGui::SetCursorPosX(180);
		if (ImGui::SmallButton(ICON_FK_PLUS_CIRCLE "##add_program"))
		{
			ImNodes::ClearLinkSelection();
			ImNodes::ClearNodeSelection();

			std::string name = "Program " + std::to_string(m_Programs.size() + 1);
			AddProgram(m_shaderCache->allocateEmptyGlProgram(name));

			m_SelectedItemType = SelectedItemType::PROGRAM;
			m_SelectedItemId = (int)m_Programs.size() - 1;
		}
		ImGui::SameLine();
		ImGui::SetCursorPosX(xPos);

		// Title bar
		ImGui::SetNextItemOpen(true, ImGuiCond_Once);
		ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 4));
		ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 0.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0.0f);
		ImGui::PushStyleColor(ImGuiCol_Header, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		bool isNodeOpened = ImGui::CollapsingHeader("PROGRAMS", ImGuiTreeNodeFlags_SpanAvailWidth);
		ImGui::SameLine();
		ImGui::SetCursorPosX(180);
		ImGui::Text(ICON_FK_PLUS_CIRCLE);
		ImGui::PopStyleVar(3);
		ImGui::PopStyleColor(3);

		if (isNodeOpened)
		{
			ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.25f, 0.25f, 0.25f, 0.4f));
			for (int i = 0; i < m_Programs.size(); i++)
			{
				// Item
				std::string name = "\t\t" + m_Programs[i]->getProgramCode().getProgramName();
				name += "##program" + std::to_string(i);
				bool isSelected = m_SelectedItemType == SelectedItemType::PROGRAM;
				isSelected = isSelected && (m_SelectedItemId == i);
				if (ImGui::Selectable(name.c_str(), &isSelected))
				{
					ImNodes::ClearLinkSelection();
					ImNodes::ClearNodeSelection();
					if (isSelected)
					{
						m_SelectedItemType = SelectedItemType::PROGRAM;
						m_SelectedItemId = i;
					}
					else
					{
						m_SelectedItemType = SelectedItemType::NONE;
						m_SelectedItemId = -1;
					}
				}
				if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))
				{
					ImGui::SetDragDropPayload("program", &i, sizeof(int));
					ImGui::Text(m_Programs[i]->getProgramCode().getProgramName().c_str());
					ImGui::EndDragDropSource();
				}

				// Context menu
				ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(4, 4));
				ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(12, 6));
				ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(14, 4));
				ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.1f, 0.4f, 0.9f, 1.0f));
				ImGui::PushStyleColor(ImGuiCol_PopupBg, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
				if (ImGui::BeginPopupContextItem())
				{
					ImNodes::ClearLinkSelection();
					ImNodes::ClearNodeSelection();
					m_SelectedItemType = SelectedItemType::PROGRAM;
					m_SelectedItemId = i;

					if (ImGui::MenuItem("Delete", ICON_FK_TRASH, "DELETE"))
						DeleteSelectedItem();

					ImGui::EndPopup();
				}
				ImGui::PopStyleColor(2);
				ImGui::PopStyleVar(3);
			}
			ImGui::PopStyleColor();
		}
	}

	// Framebuffers
	{
		// Add button
		float xPos = ImGui::GetCursorPosX();
		ImGui::SetCursorPosX(180);
		if (ImGui::SmallButton(ICON_FK_PLUS_CIRCLE "##add_framebuffer"))
		{
			ImNodes::ClearLinkSelection();
			ImNodes::ClearNodeSelection();

			std::string name = "Framebuffer " + std::to_string(m_Framebuffers.size());
			GlFrameBufferPtr framebuffer = std::make_shared<GlFrameBuffer>(name);
			AddFramebuffer(framebuffer);

			m_SelectedItemType = SelectedItemType::FRAMEBUFFER;
			m_SelectedItemId = (int)m_Framebuffers.size() - 1;
		}
		ImGui::SameLine();
		ImGui::SetCursorPosX(xPos);

		ImGui::SetNextItemOpen(true, ImGuiCond_Once);
		ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 4));
		ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 0.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0.0f);
		ImGui::PushStyleColor(ImGuiCol_Header, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		bool isNodeOpened = ImGui::CollapsingHeader("FRAMEBUFFERS", ImGuiTreeNodeFlags_SpanAvailWidth);
		ImGui::SameLine();
		ImGui::SetCursorPosX(180);
		ImGui::Text(ICON_FK_PLUS_CIRCLE);
		ImGui::PopStyleVar(3);
		ImGui::PopStyleColor(3);

		if (isNodeOpened)
		{
			ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.25f, 0.25f, 0.25f, 0.4f));
			for (int i = 1; i < m_Framebuffers.size(); i++)
			{
				// Item
				std::string name = "\t\t" + m_Framebuffers[i]->getName();
				name += "##framebuffer" + std::to_string(i);
				bool isSelected = m_SelectedItemType == SelectedItemType::FRAMEBUFFER;
				isSelected = isSelected && (m_SelectedItemId == i);
				if (ImGui::Selectable(name.c_str(), &isSelected))
				{
					ImNodes::ClearLinkSelection();
					ImNodes::ClearNodeSelection();
					if (isSelected)
					{
						m_SelectedItemType = SelectedItemType::FRAMEBUFFER;
						m_SelectedItemId = i;
					}
					else
					{
						m_SelectedItemType = SelectedItemType::NONE;
						m_SelectedItemId = -1;
					}
				}

				if (i == 0)
					continue;
				// Context menu
				ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(4, 4));
				ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(12, 6));
				ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(14, 4));
				ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.1f, 0.4f, 0.9f, 1.0f));
				ImGui::PushStyleColor(ImGuiCol_PopupBg, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
				if (ImGui::BeginPopupContextItem())
				{
					ImNodes::ClearLinkSelection();
					ImNodes::ClearNodeSelection();
					m_SelectedItemType = SelectedItemType::FRAMEBUFFER;
					m_SelectedItemId = i;

					if (ImGui::MenuItem("Delete", ICON_FK_TRASH, "DELETE"))
						DeleteSelectedItem();

					ImGui::EndPopup();
				}
				ImGui::PopStyleColor(2);
				ImGui::PopStyleVar(3);
			}
			ImGui::PopStyleColor();
		}
	}

	ImGui::EndChild();
}

void NodeEditorWindow::renderMainFrame()
{
	ImGui::BeginChild("Main", ImVec2(ImGui::GetContentRegionAvail().x,
									 ImGui::GetContentRegionAvail().y - 226));

	ImNodes::BeginNodeEditor();

	m_nodeGraph->editorRender(m_editorState);

	ImNodes::EndNodeEditor();
	ImGui::EndChild();

	// Node selection
	if (ImNodes::NumSelectedNodes() == 1 && ImNodes::NumSelectedLinks() == 0)
	{
		int ids[1]= {-1};
		ImNodes::GetSelectedNodes(ids);

		m_SelectedItemType = SelectedItemType::NODE;
		m_SelectedItemId = ids[0];
	}
	else if (ImNodes::NumSelectedNodes() > 1 || ImNodes::NumSelectedLinks() > 0)
	{
		m_SelectedItemType = SelectedItemType::NODES;
	}
	else if (m_SelectedItemType >= SelectedItemType::NODES)
	{
		m_SelectedItemType = SelectedItemType::NONE;
	}

	// Start link
	if (ImNodes::IsLinkStarted(&m_editorState.startedLinkPinId))
	{
		NodePinPtr pinPtr= m_nodeGraph->getNodePinById(m_editorState.startedLinkPinId);
		if (pinPtr)
		{
			ImNodes::GetStyle().Colors[ImNodesCol_Link] = pinPtr->editorGetLinkStyleColor();
		}
	}

	// Drop link
	if (ImNodes::IsLinkDropped())
	{
		ImGui::OpenPopup("editor_context_menu_nodes");
		m_editorState.bLinkHanged = true;
		m_editorState.hangPos = ImGui::GetMousePos();
	}

	// Link creation
	int startPinId, endPinId;
	if (ImNodes::IsLinkCreated(&startPinId, &endPinId))
	{
		m_editorState.startedLinkPinId = -1;
		CreateLink(startPinId, endPinId);
	}

	// Context menu
	renderContextMenu(m_editorState);

	// Drag and drop creation
	if (ImGui::BeginDragDropTarget())
	{
		if (auto payload = ImGui::AcceptDragDropPayload("program"))
		{
			IM_ASSERT(payload->DataSize == sizeof(int));
			int id = *(const int*)payload->Data;
			auto mousePos = ImGui::GetMousePos();
			CreateProgramNode(id, mousePos);
		}
		else if (auto payload = ImGui::AcceptDragDropPayload("texture"))
		{
			IM_ASSERT(payload->DataSize == sizeof(int));
			int id = *(const int*)payload->Data;
			auto mousePos = ImGui::GetMousePos();
			CreateTextureNode(id, mousePos);
		}
		ImGui::EndDragDropTarget();
	}

	// Delete key event
	if (ImGui::IsKeyPressed(ImGuiKey_Delete, false))
		DeleteSelectedItem();
}

void NodeEditorWindow::renderContextMenu(const NodeEditorState& editorState)
{
	if (ImGui::GetMouseDragDelta(ImGuiMouseButton_Right).x == 0.0f
		&& ImGui::GetMouseDragDelta(ImGuiMouseButton_Right).y == 0.0f
		&& ImGui::IsMouseReleased(ImGuiMouseButton_Right)
		&& ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows))
	{
		int id = -1;
		if (ImNodes::IsNodeHovered(&id))
		{
			ImNodes::ClearNodeSelection();
			ImNodes::ClearLinkSelection();
			ImNodes::SelectNode(id);
			m_SelectedItemType = SelectedItemType::NODE;
			m_SelectedItemId = id;
			ImGui::OpenPopup("editor_context_menu_node");
		}
		else if (ImNodes::IsLinkHovered(&id))
		{
			ImNodes::ClearNodeSelection();
			ImNodes::ClearLinkSelection();
			ImNodes::SelectLink(id);
			m_SelectedItemType = SelectedItemType::LINK;
			m_SelectedItemId = id;
			ImGui::OpenPopup("editor_context_menu_link");
		}
		else
		{
			ImGui::OpenPopup("editor_context_menu_nodes");
			m_editorState.hangPos = ImGui::GetMousePos();
		}
	}

	ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(4, 4));
	ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(12, 6));
	ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(14, 4));
	ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.1f, 0.4f, 0.9f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_PopupBg, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
	if (ImGui::BeginPopup("editor_context_menu_node"))
	{
		NodePtr node;
		if (m_SelectedItemType == SelectedItemType::NODE)
		{
			node= m_nodeGraph->getNodeById(m_SelectedItemId);
		}

		if (node && node->editorCanDelete())
		{
			if (ImGui::MenuItem("Delete", ICON_FK_TRASH, "DELETE"))
			{
				m_nodeGraph->deleteNodeById(m_SelectedItemId);
			}
		}
		else
		{
			ImGui::CloseCurrentPopup();
		}
		ImGui::EndPopup();
	}
	else if (ImGui::BeginPopup("editor_context_menu_link"))
	{
		if (m_SelectedItemType == SelectedItemType::LINK &&
			ImGui::MenuItem("Delete", ICON_FK_TRASH, "DELETE"))
		{
			m_nodeGraph->deleteLinkById(m_SelectedItemId);
		}
		ImGui::EndPopup();
	}
	else if (ImGui::BeginPopup("editor_context_menu_nodes"))
	{
		std::vector<NodeFactoryPtr> nodeFactories= m_nodeGraph->editorGetValidNodeFactories(editorState);
		for (NodeFactoryPtr nodeFactory : nodeFactories)
		{
			const std::string nodeTitle= nodeFactory->getNodeDefinition()->editorGetTitle();

			if (ImGui::MenuItem(nodeTitle.c_str()))
			{
				NodePtr newNode= nodeFactory->createNode(editorState);

				m_SelectedItemType = SelectedItemType::NODE;
				m_SelectedItemId = newNode->getId();

				ImNodes::ClearLinkSelection();
				ImNodes::ClearNodeSelection();
				ImNodes::SelectNode(m_SelectedItemId);

				break;
			}
		}
		ImGui::EndPopup();

	#if 0
		if (m_StartedLinkPinId != -1)
		{
			EditorPinPtr pin = m_Pins[m_StartedLinkPinId];
			if (pin->type == EditorPinType::FLOW && m_Programs.size() > 0)
			{
				for (int i = 0; i < m_Programs.size(); i++)
				{
					if (ImGui::MenuItem(m_Programs[i]->getProgramCode().getProgramName().c_str()))
					{
						CreateProgramNode(i, m_HangPos);
						EditorProgramNodePtr newNode =
							std::static_pointer_cast<EditorProgramNode>(m_Nodes.back());

						if (pin->isOutput)
							CreateLink(pin->id, newNode->flowIn->id);
						else
							CreateLink(newNode->flowOut->id, pin->id);
					}
				}
			}
			else if (pin->type == EditorPinType::TEXTURE &&
					 !pin->isOutput &&
					 m_Textures.size() > 0)
			{
				for (int i = 0; i < m_Textures.size(); i++)
				{
					std::string name = "Texture: " + m_Textures[i]->getName();
					if (ImGui::MenuItem(name.c_str()))
					{
						CreateTextureNode(i, m_HangPos);
						CreateLink(m_Nodes.back()->pinsOut[0]->id, pin->id);
					}
				}
			}
			else if (pin->type == EditorPinType::TEXTURE &&
					 pin->isOutput &&
					 pin->ownerNode->type == EditorNodeType::TEXTURE)
			{
				if (ImGui::MenuItem("Image"))
				{
					CreateImageNode(m_HangPos);
					CreateLink(m_Nodes.back()->pinsIn[0]->id, pin->id);
				}
			}
			else if (pin->type == EditorPinType::FLOAT && !pin->isOutput)
			{
				if (ImGui::MenuItem("Time"))
				{
					CreateTimeNode(m_HangPos);
					CreateLink(m_Nodes.back()->pinsOut[0]->id, pin->id);
				}
			}
			else if (pin->type == EditorPinType::FLOAT2 && !pin->isOutput)
			{
				if (ImGui::MenuItem("Mouse Position"))
				{
					CreateMousePosNode(m_HangPos);
					CreateLink(m_Nodes.back()->pinsOut[0]->id, pin->id);
				}
			}
			else
				ImGui::CloseCurrentPopup();
		}
		else
		{
			if (m_Programs.size() > 0)
			{
				for (int i = 0; i < m_Programs.size(); i++)
				{
					if (ImGui::MenuItem(m_Programs[i]->getProgramCode().getProgramName().c_str()))
						CreateProgramNode(i, m_HangPos);
				}
				ImGui::Separator();
			}
			if (m_Textures.size() > 0)
			{
				for (int i = 0; i < m_Textures.size(); i++)
				{
					std::string name = "Texture: " + m_Textures[i]->getName();
					if (ImGui::MenuItem(name.c_str()))
						CreateTextureNode(i, m_HangPos);
				}
				ImGui::Separator();
			}
			if (ImGui::MenuItem("Block"))
				CreateBlockNode(m_HangPos);
			ImGui::Separator();
			if (ImGui::MenuItem("Time"))
				CreateTimeNode(m_HangPos);
			if (ImGui::MenuItem("Mouse Position"))
				CreateMousePosNode(m_HangPos);
		}
		ImGui::EndPopup();
	#endif
	}
	else if (m_editorState.bLinkHanged)
	{
		m_editorState.bLinkHanged = false;
		m_editorState.startedLinkPinId = -1;
	}
	ImGui::PopStyleColor(2);
	ImGui::PopStyleVar(3);
}

void NodeEditorWindow::renderBottomPanel()
{
	ImGui::BeginChild("Bottom Panel", ImVec2(ImGui::GetContentRegionAvail().x, 216));
	if (ImGui::BeginTabBar("BottomTabBar"))
	{
		ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));
		if (ImGui::BeginTabItem("Textures"))
		{
			ImGui::PushStyleColor(ImGuiCol_ChildBg, ImVec4(0.25f, 0.25f, 0.25f, 0.4f));
			ImGui::PushStyleColor(ImGuiCol_Separator, ImVec4(0.13f, 0.13f, 0.13f, 1.0f));
			ImGui::BeginChild("TexturesSubFrame");

			ImGui::SetCursorPos(ImVec2(ImGui::GetCursorPos().x + 6, ImGui::GetCursorPos().y + 6));
			if (ImGui::ImageButton("  Add##tex", ICON_FK_PLUS, ImVec2(70, 25), ImVec2(0.4f, 0.8f), ImVec2(0.4f, 1.0f)))
			{
				const char* filterItems[5] = {"*.jpg", "*.jpeg", "*.png", "*.bmp", "*.tga"};
				const char* filterDesc = "Image Files (*.jpg;*.jpeg;*.png;*.bmp;*.tga)";
				auto paths_c = tinyfd_openFileDialog("Load Texture", "", 5, filterItems, filterDesc, 1);
				if (paths_c)
				{
					std::stringstream ssPaths(paths_c);
					std::string path;
					while (std::getline(ssPaths, path, '|'))
					{
						std::string universalPath(path);
						std::replace(universalPath.begin(), universalPath.end(), '\\', '/');

						GlTexturePtr tex = std::make_shared<GlTexture>();
						tex->setImagePath(universalPath);

						if (tex->reloadTextureFromImagePath())
						{
							m_Textures.push_back(tex);
						}
					}
				}
			}

			ImGui::SetCursorPosY(ImGui::GetCursorPosY() + 6);
			ImGui::Separator();

			// Textures browser
			{
				ImGui::BeginChild("TextureBrowser");

				ImGui::Dummy(ImVec2(1, 10));
				for (int i = 0; i < m_Textures.size(); i++)
				{
					ImGui::Dummy(ImVec2(10, 140));
					ImGui::SameLine();
					ImGui::BeginGroup();
					std::string idStr = "##texture" + std::to_string(i);
					ImGui::Button(idStr.c_str(), ImVec2(120, 140));

					if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))
					{
						ImGui::SetDragDropPayload("texture", &i, sizeof(int));
						ImGui::Text(m_Textures[i]->getName().c_str());
						ImGui::EndDragDropSource();
					}

					// Context menu
					bool itemDeleted = false;
					ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(4, 4));
					ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(12, 6));
					ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(14, 4));
					ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.1f, 0.4f, 0.9f, 1.0f));
					ImGui::PushStyleColor(ImGuiCol_PopupBg, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
					if (ImGui::BeginPopupContextItem())
					{
						ImNodes::ClearLinkSelection();
						ImNodes::ClearNodeSelection();
						m_SelectedItemType = SelectedItemType::TEXTURE;
						m_SelectedItemId = i;

						if (ImGui::MenuItem("Delete", ICON_FK_TRASH, "DELETE"))
						{
							DeleteSelectedItem();
							itemDeleted = true;
						}

						ImGui::EndPopup();
					}
					ImGui::PopStyleColor(2);
					ImGui::PopStyleVar(3);

					if (!itemDeleted)
					{
						ImGui::SetCursorPosX(ImGui::GetCursorPosX() + 10);
						ImGui::SetCursorPosY(ImGui::GetCursorPosY() - 130);
						ImGui::Image((void*)(intptr_t)m_Textures[i]->getGlTextureId(), ImVec2(100, 100));
						ImGui::Dummy(ImVec2(2, 1));
						ImGui::SameLine();
						ImGui::SetNextItemWidth(108);
						ImGui::Text(m_Textures[i]->getName().c_str());
					}
					ImGui::EndGroup();

					ImGui::SameLine();
					if (ImGui::GetContentRegionAvail().x < 130)
					{
						ImGui::NewLine();
						ImGui::NewLine();
					}
				}
				ImGui::NewLine();
				ImGui::Dummy(ImVec2(1, 10));

				ImGui::EndChild();
			}

			ImGui::EndChild();
			ImGui::PopStyleColor();
			ImGui::PopStyleColor();
			ImGui::EndTabItem();
		}
		ImGui::PopStyleVar();
		ImGui::EndTabBar();
	}
	ImGui::EndChild();
}

void NodeEditorWindow::renderRightPanel()
{
	ImGui::SameLine();
	ImGui::BeginChild("Right Panel", ImVec2(344, ImGui::GetContentRegionAvail().y));

	if (m_SelectedItemType == SelectedItemType::NODE)
	{
		NodePtr node= m_nodeGraph->getNodeById(m_SelectedItemId);

		if (node)
		{
			node->editorRenderPropertySheet(m_editorState);
		}
	}
	else if (m_SelectedItemType == SelectedItemType::PROGRAM)
	{
		// Section 1: Basic info
		ImGui::SetNextItemOpen(true, ImGuiCond_Once);
		ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 4));
		ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 0.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0.0f);
		ImGui::PushStyleColor(ImGuiCol_Header, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		bool isNodeOpened = ImGui::CollapsingHeader("Program", ImGuiTreeNodeFlags_SpanAvailWidth);
		ImGui::PopStyleVar(3);
		ImGui::PopStyleColor(3);

		if (isNodeOpened)
		{
			// Name
			ImGui::Text("\t\tName");
			ImGui::SameLine(160);
			ImGui::SetNextItemWidth(150);
			GlProgramCode& programCode= m_Programs[m_SelectedItemId]->getProgramCodeMutable();
			std::string name = programCode.getProgramName();
			if (ImGui::InputText("##progName", &name))
				programCode.setProgramName(name);
		}

		// Section 2: Shaders
		// Add Button
		float xPos = ImGui::GetCursorPosX();
		ImGui::SetCursorPosX(325);
		if (ImGui::SmallButton(ICON_FK_PLUS_CIRCLE "##add_shader"))
		{
		#if 0
			auto paths_c = tinyfd_openFileDialog("Add Shader", "", 0, 0, 0, 1);
			if (paths_c)
			{
				std::stringstream ssPaths(paths_c);
				std::string path;
				while (std::getline(ssPaths, path, '|'))
					m_Programs[m_SelectedItemId]->AddShader(
						PathUtils::makeUniversalPathString(path).c_str(),
						GL_VERTEX_SHADER);
			}
		#endif
		}
		ImGui::SameLine();
		ImGui::SetCursorPosX(xPos);

		// Title bar
		ImGui::SetNextItemOpen(true, ImGuiCond_Once);
		ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 4));
		ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 0.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0.0f);
		ImGui::PushStyleColor(ImGuiCol_Header, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		ImGui::PushStyleColor(ImGuiCol_HeaderActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
		isNodeOpened = ImGui::CollapsingHeader("Shaders", ImGuiTreeNodeFlags_SpanAvailWidth);
		ImGui::SameLine();
		ImGui::SetCursorPosX(325);
		ImGui::Text(ICON_FK_PLUS_CIRCLE);
		ImGui::PopStyleVar(3);
		ImGui::PopStyleColor(3);

		if (isNodeOpened)
		{
			ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.25f, 0.25f, 0.25f, 0.4f));
			const GlProgramCode& shaderCode= m_Programs[m_SelectedItemId]->getProgramCode();

			if (ImGui::SmallButton(ICON_FK_PLUS_CIRCLE "##add_shader"))
			{
			#if 0
				auto paths_c = tinyfd_openFileDialog("Add Shader", "", 0, 0, 0, 1);
				if (paths_c)
				{
					std::stringstream ssPaths(paths_c);
					std::string path;
					while (std::getline(ssPaths, path, '|'))
						m_Programs[m_SelectedItemId]->AddShader(
							PathUtils::makeUniversalPathString(path).c_str(),
							GL_VERTEX_SHADER);
				}
			#endif
			}
			std::vector<std::filesystem::path> shaders = 
				{
						shaderCode.getVertexShaderFilePath(), 
						shaderCode.getFragmeShaderFilePath()
				};
			for (int i = 0; i < shaders.size(); i++)
			{
				// Name
				std::string name = shaders[i].string();
				name = "\t" + name.substr(name.find_last_of('/') + 1);
				ImGui::SetNextItemWidth(150);
				ImGui::Text(name.c_str());

				#if 0
				// Type
				int iVar = 0;
				GLenum type = m_Programs[m_SelectedItemId]->GetShaderTypes()[i];
				if (type == GL_VERTEX_SHADER)
					iVar = 0;
				else if (type == GL_FRAGMENT_SHADER)
					iVar = 1;
				const char* items = "Vertex\0Fragment\0";
				std::string idStr = "##shadertype" + std::to_string(i);
				ImGui::SameLine(160);
				ImGui::SetNextItemWidth(150);
				ImGui::PushStyleColor(ImGuiCol_PopupBg, ImVec4(0.13f, 0.13f, 0.13f, 1.0f));
				if (ImGui::Combo(idStr.c_str(), &iVar, items))
				{
					if (iVar == 0)
						m_Programs[m_SelectedItemId]->SetShaderType(i, GL_VERTEX_SHADER);
					else if (iVar == 1)
						m_Programs[m_SelectedItemId]->SetShaderType(i, GL_FRAGMENT_SHADER);
				}
				ImGui::PopStyleColor();

				// Delete button
				ImGui::SameLine();
				ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0.0f);
				ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0.13f, 0.13f, 0.13f, 1.0f));
				ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
				ImGui::PushStyleColor(ImGuiCol_ButtonActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
				idStr = ICON_FK_TRASH "##shader" + std::to_string(i);
				bool itemDeleted = false;
				if (ImGui::SmallButton(idStr.c_str()))
				{
					m_Programs[m_SelectedItemId]->RemoveShader(i);
					itemDeleted = true;
				}
				ImGui::PopStyleColor(3);
				ImGui::PopStyleVar();
				if (itemDeleted)
					break;
				#endif
			}
			ImGui::PopStyleColor();
		}
	}

	else if (m_SelectedItemType == SelectedItemType::FRAMEBUFFER)
	{
		if (m_SelectedItemId != 0)
		{
			ImGui::SetNextItemOpen(true, ImGuiCond_Once);
			ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 4));
			ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0.0f);
			ImGui::PushStyleColor(ImGuiCol_Header, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
			ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
			ImGui::PushStyleColor(ImGuiCol_HeaderActive, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
			bool isNodeOpened = ImGui::CollapsingHeader("Framebuffer", ImGuiTreeNodeFlags_SpanAvailWidth);
			ImGui::PopStyleVar(3);
			ImGui::PopStyleColor(3);

			if (isNodeOpened)
			{
				// Name
				ImGui::Text("\t\tName");
				ImGui::SameLine(160);
				ImGui::SetNextItemWidth(150);
				std::string name = m_Framebuffers[m_SelectedItemId]->getName();
				if (ImGui::InputText("##framebufferName", &name))
					m_Framebuffers[m_SelectedItemId]->setName(name);

				// Size
				int x, y;
				m_Framebuffers[m_SelectedItemId]->getSize(&x, &y);
				ImGui::Text("\t\tWidth");
				ImGui::SameLine(160);
				ImGui::SetNextItemWidth(150);
				if (ImGui::DragInt("##framebufferSizeX", &x, 1.0f, 0, 4096))
				{
					if (x < 0) x = 0;
					if (x > 4096) x = 4096;
					m_Framebuffers[m_SelectedItemId]->setSize(x, y);
				}
				ImGui::Text("\t\tHeight");
				ImGui::SameLine(160);
				ImGui::SetNextItemWidth(150);
				if (ImGui::DragInt("##framebufferSizeY", &y, 1.0f, 0, 4096))
				{
					if (y < 0) y = 0;
					if (y > 4096) y = 4096;
					m_Framebuffers[m_SelectedItemId]->setSize(x, y);
				}

				// Attachments
				ImGui::Text("\t\tAttachments");
				ImGui::SameLine(160);
				ImGui::SetNextItemWidth(150);
				int iVal = m_Framebuffers[m_SelectedItemId]->getNumAttachments();
				if (ImGui::SliderInt("##framebufferAttachments", &iVal, 0, 8))
				{
					if (iVal < 0) iVal = 0;
					if (iVal > 8) iVal = 8;
					m_Framebuffers[m_SelectedItemId]->setNumAttachments(iVal);
				}

				// Renderbuffer
				ImGui::Text("\t\tRenderbuffer");
				ImGui::SameLine(160);
				ImGui::SetNextItemWidth(150);
				bool hasRenderbuffer = m_Framebuffers[m_SelectedItemId]->hasRenderbuffer();
				if (ImGui::Checkbox("##framebufferRenderbuffer", &hasRenderbuffer))
					m_Framebuffers[m_SelectedItemId]->setRenderbuffer(hasRenderbuffer);
			}
		}
	}

	ImGui::EndChild();
}

void NodeEditorWindow::DeleteSelectedItem()
{
	if (m_SelectedItemType >= SelectedItemType::NODES)
	{
		int numNodes = ImNodes::NumSelectedNodes();
		int* ids = new int[numNodes];
		ImNodes::GetSelectedNodes(ids);
		for (int i = 0; i < numNodes; i++)
		{
			if (m_Nodes[ids[i]]->type != EditorNodeType::EVENT)
				m_nodeGraph->deleteNodeById(ids[i]);
		}
		delete[] ids;

		int numLinks = ImNodes::NumSelectedLinks();
		ids = new int[numLinks];
		ImNodes::GetSelectedLinks(ids);
		for (int i = 0; i < numLinks; i++)
			m_nodeGraph->deleteLinkById(ids[i]);
		delete[] ids;

		if (numNodes > 0)
		{
			UpdateNodes();
			UpdatePins();
		}
		UpdateLinks();
	}

	else if (m_SelectedItemType == SelectedItemType::PROGRAM)
		DeleteProgram(m_SelectedItemId);

	else if (m_SelectedItemType == SelectedItemType::FRAMEBUFFER)
		DeleteFramebuffer(m_SelectedItemId);

	else if (m_SelectedItemType == SelectedItemType::TEXTURE)
		DeleteTexture(m_SelectedItemId);

	m_SelectedItemType = SelectedItemType::NONE;
	m_SelectedItemId = -1;
}

void NodeEditorWindow::AddProgram(GlProgramPtr pProgram)
{
	m_Programs.push_back(pProgram);
}

void NodeEditorWindow::DeleteProgram(int ix)
{
	bool needsUpdate = false;
	for (auto& node : m_Nodes)
	{
		if (node->type == EditorNodeType::PROGRAM)
		{
			EditorProgramNodePtr progNode = std::static_pointer_cast<EditorProgramNode>(node);

			if (progNode->target == m_Programs[ix])
			{
				m_nodeGraph->deleteNodeById(node->id);
				needsUpdate = true;
			}
		}
	}
	if (needsUpdate)
	{
		UpdateNodes();
		UpdatePins();
		UpdateLinks();
	}

	{
		GlProgramPtr program = m_Programs[ix];

		m_shaderCache->removeGlProgramFromCache(program);
		m_Programs.erase(m_Programs.begin() + ix);
	}
}

void NodeEditorWindow::AddFramebuffer(GlFrameBufferPtr pFramebuffer)
{
	if (m_frameBufferArrayProperty)
	{
		m_frameBufferArrayProperty->getArrayMutable().push_back(pFramebuffer);
		m_frameBufferArrayProperty->notifyPropertyModified();
	}
}

void NodeEditorWindow::DeleteFramebuffer(int ix)
{
	if (m_frameBufferArrayProperty)
	{
		auto frameBufferArray= m_frameBufferArrayProperty->getArrayMutable();

		if (ix >= 0 && ix < (int)frameBufferArray.size())
		{
			frameBufferArray.erase(frameBufferArray.begin() + ix);
			m_frameBufferArrayProperty->notifyPropertyModified();
		}
	}
}

void NodeEditorWindow::AddTexture(GlTexturePtr pTex)
{
	m_Textures.push_back(pTex);
}

void NodeEditorWindow::DeleteTexture(int ix)
{
	bool needsUpdate = false;
	for (auto& node : m_Nodes)
	{
		if (node->type == EditorNodeType::TEXTURE)
		{
			EditorTextureNodePtr texNode = std::static_pointer_cast<EditorTextureNode>(node);

			if (texNode->target == m_Textures[ix])
			{
				m_nodeGraph->deleteNodeById(node->id);
				needsUpdate = true;
			}
		}
	}
	if (needsUpdate)
	{
		UpdateNodes();
		UpdatePins();
		UpdateLinks();
	}

	{
		GlTexturePtr texture= m_Textures[ix];

		texture->disposeTexture();
		m_Textures.erase(m_Textures.begin() + ix);
	}
}

void NodeEditorWindow::UpdateNodes()
{
	for (int i = 0; i < m_Nodes.size(); i++)
	{
		if (!m_Nodes[i])
		{
			m_Nodes.erase(m_Nodes.begin() + i);
			i--;
		}
		else
		{
			const ImVec2* nodePos= (ImVec2* )(&m_Nodes[i]->nodePos);

			m_Nodes[i]->id = i;
			ImNodes::SetNodeScreenSpacePos(m_Nodes[i]->id, *nodePos);
		}
	}
}

void NodeEditorWindow::UpdatePins()
{
	for (int i = 0; i < m_Pins.size(); i++)
	{
		if (!m_Pins[i])
		{
			m_Pins.erase(m_Pins.begin() + i);
			i--;
		}
		else
			m_Pins[i]->id = i;
	}
}

void NodeEditorWindow::UpdateLinks()
{
	for (int i = 0; i < m_Links.size(); i++)
	{
		if (!m_Links[i])
		{
			m_Links.erase(m_Links.begin() + i);
			i--;
		}
		else
		{
			m_Links[i]->id = i;
		}
	}
}

void NodeEditorWindow::onNodeDeleted(t_node_id id)
{
	if (m_SelectedItemType == SelectedItemType::NODE && m_SelectedItemId == id)
	{
		ImNodes::ClearNodeSelection();
		m_SelectedItemType = SelectedItemType::NONE;
		m_SelectedItemId = -1;
	}
}

void NodeEditorWindow::onLinkDeleted(t_node_link_id id)
{
	if (m_SelectedItemType == SelectedItemType::LINK && m_SelectedItemId == id)
	{
		ImNodes::ClearLinkSelection();
		m_SelectedItemType = SelectedItemType::NONE;
		m_SelectedItemId = -1;
	}
}

//TODO
void NodeEditorWindow::CreateLink(int startPinId, int endPinId)
{
	bool canCreateLink = false;
	if (m_Pins[startPinId]->type == m_Pins[endPinId]->type)
	{
		if (m_Pins[startPinId]->type == EditorPinType::FLOW)
		{
			bool needsUpdate = false;
			if (m_Pins[startPinId]->connectedLinks.size() > 0)
			{
				m_nodeGraph->deleteLinkById(m_Pins[startPinId]->connectedLinks[0]->id);
				needsUpdate = true;
			}
			if (m_Pins[endPinId]->connectedLinks.size() > 0)
			{
				m_nodeGraph->deleteLinkById(m_Pins[endPinId]->connectedLinks[0]->id);
				needsUpdate = true;
			}
			if (needsUpdate)
				UpdateLinks();
			canCreateLink = true;
		}
		else if (m_Pins[startPinId]->type == EditorPinType::BLOCK)
		{
			if (m_Pins[startPinId]->size == m_Pins[endPinId]->size)
			{
				if (!m_Pins[startPinId]->isOutput)
				{
					if (m_Pins[startPinId]->connectedLinks.size() > 0)
					{
						m_nodeGraph->deleteLinkById(m_Pins[startPinId]->connectedLinks[0]->id);
						UpdateLinks();
					}
				}
				if (!m_Pins[endPinId]->isOutput)
				{
					if (m_Pins[endPinId]->connectedLinks.size() > 0)
					{
						m_nodeGraph->deleteLinkById(m_Pins[endPinId]->connectedLinks[0]->id);
						UpdateLinks();
					}
				}
				canCreateLink = true;
			}
			else
			{
				bool needsUpdate = false;
				if (!m_Pins[startPinId]->isOutput)
				{
					if (m_Pins[startPinId]->connectedLinks.size() > 0)
					{
						m_nodeGraph->deleteLinkById(m_Pins[startPinId]->connectedLinks[0]->id);
						needsUpdate = true;
					}
				}
				if (!m_Pins[endPinId]->isOutput)
				{
					if (m_Pins[endPinId]->connectedLinks.size() > 0)
					{
						m_nodeGraph->deleteLinkById(m_Pins[endPinId]->connectedLinks[0]->id);
						needsUpdate = true;
					}
				}
				if ((m_Pins[startPinId]->ownerNode->type == EditorNodeType::PINGPONG
					 && m_Pins[startPinId]->size == 0))
				{
					auto pingpongNode = (EditorPingPongNode*)m_Pins[startPinId]->ownerNode.get();
					pingpongNode->size = m_Pins[endPinId]->size;
					auto pin = pingpongNode->pinsIn[0];
					pin->size = m_Pins[endPinId]->size;
					for (auto& link : pin->connectedLinks)
					{
						m_nodeGraph->deleteLinkById(link->id);
						needsUpdate = true;
					}
					pin = pingpongNode->pinsIn[1];
					pin->size = m_Pins[endPinId]->size;
					for (auto& link : pin->connectedLinks)
					{
						m_nodeGraph->deleteLinkById(link->id);
						needsUpdate = true;
					}
					pin = pingpongNode->pinsOut[0];
					pin->size = m_Pins[endPinId]->size;
					for (auto& link : pin->connectedLinks)
					{
						m_nodeGraph->deleteLinkById(link->id);
						needsUpdate = true;
					}
					pin = pingpongNode->pinsOut[1];
					pin->size = m_Pins[endPinId]->size;
					for (auto& link : pin->connectedLinks)
					{
						m_nodeGraph->deleteLinkById(link->id);
						needsUpdate = true;
					}
					canCreateLink = true;
				}
				else if (m_Pins[endPinId]->ownerNode->type == EditorNodeType::PINGPONG
						 && m_Pins[endPinId]->size == 0)
				{
					auto pingpongNode = (EditorPingPongNode*)m_Pins[endPinId]->ownerNode.get();
					pingpongNode->size = m_Pins[startPinId]->size;
					auto pin = pingpongNode->pinsIn[0];
					pin->size = m_Pins[startPinId]->size;
					for (auto& link : pin->connectedLinks)
					{
						m_nodeGraph->deleteLinkById(link->id);
						needsUpdate = true;
					}
					pin = pingpongNode->pinsIn[1];
					pin->size = m_Pins[startPinId]->size;
					for (auto& link : pin->connectedLinks)
					{
						m_nodeGraph->deleteLinkById(link->id);
						needsUpdate = true;
					}
					pin = pingpongNode->pinsOut[0];
					pin->size = m_Pins[startPinId]->size;
					for (auto& link : pin->connectedLinks)
					{
						m_nodeGraph->deleteLinkById(link->id);
						needsUpdate = true;
					}
					pin = pingpongNode->pinsOut[1];
					pin->size = m_Pins[startPinId]->size;
					for (auto& link : pin->connectedLinks)
					{
						m_nodeGraph->deleteLinkById(link->id);
						needsUpdate = true;
					}
					canCreateLink = true;
				}
				if (needsUpdate)
					UpdateLinks();
			}
		}
		else
		{
			if (!m_Pins[startPinId]->isOutput)
			{
				if (m_Pins[startPinId]->connectedLinks.size() > 0)
				{
					m_nodeGraph->deleteLinkById(m_Pins[startPinId]->connectedLinks[0]->id);
					UpdateLinks();
				}
			}
			if (!m_Pins[endPinId]->isOutput)
			{
				if (m_Pins[endPinId]->connectedLinks.size() > 0)
				{
					m_nodeGraph->deleteLinkById(m_Pins[endPinId]->connectedLinks[0]->id);
					UpdateLinks();
				}
			}
			canCreateLink = true;
		}
	}

	if (canCreateLink)
	{
		EditorLinkPtr link = std::make_shared<EditorLink>();

		link->id = (int)m_Links.size();
		link->pPin1 = m_Pins[startPinId];
		link->pPin2 = m_Pins[endPinId];
		m_Pins[startPinId]->connectedLinks.push_back(link);
		m_Pins[endPinId]->connectedLinks.push_back(link);
		m_Links.push_back(link);
	}
}

void NodeEditorWindow::shutdown()
{
	m_frameBufferArrayProperty= nullptr;

	if (m_nodeGraph)
	{
		m_nodeGraph->OnNodeDeleted -= MakeDelegate(this, &NodeEditorWindow::onNodeDeleted);
		m_nodeGraph->OnLinkDeleted -= MakeDelegate(this, &NodeEditorWindow::onLinkDeleted);
	}

	m_glStateStack = nullptr;

	if (m_shaderCache != nullptr)
	{
		m_shaderCache->shutdown();
		m_shaderCache = nullptr;
	}

	if (m_imnodesContext != nullptr)
	{
		ImNodes::DestroyContext(m_imnodesContext);
		m_imnodesContext= nullptr;
	}

	if (m_imguiOpenGLBackendInitialised)
	{
		ImGui_ImplOpenGL3_Shutdown();
		m_imguiOpenGLBackendInitialised = false;
	}

	if (m_imguiSDLBackendInitialised)
	{
		ImGui_ImplSDL2_Shutdown();
		m_imguiSDLBackendInitialised = false;
	}

	if (m_imguiContext != nullptr)
	{
		ImGui::DestroyContext(m_imguiContext);
		m_imguiContext = nullptr;
	}

	if (m_sdlWindow != nullptr)
	{
		m_sdlWindow->shutdown();
		m_sdlWindow = nullptr;
	}
}

float NodeEditorWindow::getWidth() const
{
	return (float)m_sdlWindow->getWidth();
}

float NodeEditorWindow::getHeight() const
{
	return (float)m_sdlWindow->getHeight();
}

float NodeEditorWindow::getAspectRatio() const
{
	return (float)m_sdlWindow->getAspectRatio();
}

bool NodeEditorWindow::onSDLEvent(const SDL_Event* event)
{
	m_sdlWindow->onSDLEvent(event);

	return ImGui_ImplSDL2_ProcessEvent(event);
}

void NodeEditorWindow::configImGui()
{
	ImGuiIO& io = ImGui::GetIO();

	io.Fonts->AddFontFromFileTTF(
		getDefaultJapaneseFontPath().string().c_str(), 16, NULL, io.Fonts->GetGlyphRangesJapanese());
	//TODO: Find these fonts
	//io.Fonts->AddFontFromFileTTF(getDefaultKoreanFontPath().c_str(), 16, NULL, io.Fonts->GetGlyphRangesKorean();
	//io.Fonts->AddFontFromFileTTF(getDefaultChineseFontPath().c_str(), 16, NULL, io.Fonts->GetGlyphRangesChineseFull();
	//io.Fonts->AddFontFromFileTTF(getDefaultCyrillicFontPath().c_str(), 16, NULL, io.Fonts->GetGlyphRangesCyrillic();
	//io.Fonts->AddFontFromFileTTF(getDefaultThaiFontPath().c_str(), 16, NULL, io.Fonts->GetGlyphRangesThai();
	//io.Fonts->AddFontFromFileTTF(getDefaultVietnameseFontPath().c_str(), 16, NULL, io.Fonts->GetGlyphRangesVietnamese();

	// Setup Dear ImGui style
	ImGui::StyleColorsDark();

	static const ImWchar icons_ranges[] = {ICON_MIN_FK, ICON_MAX_FK, 0};
	ImFontConfig icons_config;
	icons_config.MergeMode = true;
	icons_config.PixelSnapH = true;
	
	m_NormalIconFont = io.Fonts->AddFontFromFileTTF(
		getForkAwesomeWebFontPath().string().c_str(),
		14, &icons_config, icons_ranges);

	icons_config.GlyphOffset.y += (22 - 17) * 0.5f;
	m_BigIconFont = io.Fonts->AddFontFromFileTTF(
		getForkAwesomeWebFontPath().string().c_str(),
		22, &icons_config, icons_ranges);
}

void NodeEditorWindow::configImNodes()
{
	ImNodes::GetIO().AltMouseButton = ImGuiMouseButton_Right;

	ImNodes::GetStyle().NodePadding = ImVec2(12.0f, 5.0f);
	ImNodes::GetStyle().PinOffset = -16.0f;
	ImNodes::GetStyle().PinCircleRadius = 5.0f;
	ImNodes::GetStyle().NodeCornerRounding = 6.0f;
	ImNodes::GetStyle().Colors[ImNodesCol_NodeBackground] = IM_COL32(24, 24, 24, 200);
	ImNodes::GetStyle().Colors[ImNodesCol_NodeBackgroundHovered] = IM_COL32(24, 24, 24, 200);
	ImNodes::GetStyle().Colors[ImNodesCol_NodeBackgroundSelected] = IM_COL32(24, 24, 24, 200);
	ImNodes::GetStyle().Colors[ImNodesCol_GridBackground] = IM_COL32(38, 38, 38, 255);
	ImNodes::GetStyle().Colors[ImNodesCol_GridLine] = IM_COL32(53, 53, 53, 255);
}

void NodeEditorWindow::pushImGuiStyles()
{
	ImGui::PushFont(m_NormalIconFont);

	ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(6, 4));
	ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(8, 2));
	ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(4, 6));
	ImGui::PushStyleVar(ImGuiStyleVar_IndentSpacing, 12);
	ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 1);
	ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 3);
	ImGui::PushStyleVar(ImGuiStyleVar_GrabRounding, 2);

	ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.94f, 0.94f, 0.94f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_TextDisabled, ImVec4(0.66f, 0.66f, 0.66f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_WindowBg, ImVec4(0.13f, 0.13f, 0.13f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_PopupBg, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_Border, ImVec4(0.0f, 0.0f, 0.0f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.0f, 0.0f, 0.0f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_FrameBgHovered, ImVec4(0.25f, 0.25f, 0.25f, 0.4f));
	ImGui::PushStyleColor(ImGuiCol_FrameBgActive, ImVec4(0.4f, 0.4f, 0.4f, 0.4f));
	ImGui::PushStyleColor(ImGuiCol_TitleBg, ImVec4(0.18f, 0.18f, 0.18f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_TitleBgActive, ImVec4(0.18f, 0.18f, 0.18f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_TitleBgCollapsed, ImVec4(0.18f, 0.18f, 0.18f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_MenuBarBg, ImVec4(0.06f, 0.06f, 0.06f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_ScrollbarBg, ImVec4(0.1f, 0.1f, 0.1f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_SliderGrab, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImVec4(0.1f, 0.4f, 0.9f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_Tab, ImVec4(0.06f, 0.06f, 0.06f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_TabHovered, ImVec4(0.4f, 0.4f, 0.4f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_TabActive, ImVec4(0.25f, 0.25f, 0.25f, 0.4f));
	ImGui::PushStyleColor(ImGuiCol_ResizeGrip, ImVec4(0.0f, 0.0f, 0.0f, 0.0f));
	ImGui::PushStyleColor(ImGuiCol_ResizeGripHovered, ImVec4(0.0f, 0.0f, 0.0f, 0.0f));
	ImGui::PushStyleColor(ImGuiCol_ResizeGripActive, ImVec4(0.0f, 0.0f, 0.0f, 0.0f));
	ImGui::PushStyleColor(ImGuiCol_SeparatorActive, ImVec4(0.0f, 0.0f, 0.0f, 0.0f));
	ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImVec4(0.25f, 0.25f, 0.25f, 1.0f));
	ImGui::PushStyleColor(ImGuiCol_DragDropTarget, ImVec4(0.0f, 0.0f, 0.0f, 0.0f));
}

void NodeEditorWindow::popImGuiStyles()
{
	ImGui::PopFont();
	ImGui::PopStyleVar(7);
	ImGui::PopStyleColor(26);
}

// TODO: Move to Nodes
EditorPinPtr NodeEditorWindow::AllocPin(const GlProgramUniform& uniform)
{
	EditorPinPtr pin;

	eUniformDataType uniformDataType= GlProgram::getUniformSemanticDataType(uniform.semantic);
	switch (uniformDataType)
	{
		case eUniformDataType::datatype_float:
			pin = std::make_shared<EditorFloatPin>();
			break;
		case eUniformDataType::datatype_float2:
			pin = std::make_shared<EditorFloat2Pin>();
			break;
		case eUniformDataType::datatype_float3:
			pin = std::make_shared<EditorFloat3Pin>();
			break;
		case eUniformDataType::datatype_float4:
			pin = std::make_shared<EditorFloat4Pin>();
			break;
		case eUniformDataType::datatype_int:
			pin = std::make_shared<EditorIntPin>();
			break;
		case eUniformDataType::datatype_int2:
			pin = std::make_shared<EditorInt2Pin>();
			break;
		case eUniformDataType::datatype_int3:
			pin = std::make_shared<EditorInt3Pin>();
			break;
		case eUniformDataType::datatype_int4:
			pin = std::make_shared<EditorInt4Pin>();
			break;
		case eUniformDataType::datatype_mat4:
			pin = std::make_shared<EditorMat4Pin>();
			break;
		case eUniformDataType::datatype_texture:
			//TODO
			//pin = std::make_shared<EditorTexturePin>();
			break;
		default:
			pin = std::make_shared<EditorPin>();
	}

	return pin;
}

EditorPinPtr NodeEditorWindow::AllocPin(const GlShaderVar& var)
{
	auto type = EditorNodeUtil::GLTypeToPinType(var.GetType());
	EditorPinPtr pin;
	if (type == EditorPinType::FLOAT)
		pin = std::make_shared<EditorFloatPin>();
	else if (type == EditorPinType::FLOAT2)
		pin = std::make_shared<EditorFloat2Pin>();
	else if (type == EditorPinType::FLOAT3)
		pin = std::make_shared<EditorFloat3Pin>();
	else if (type == EditorPinType::FLOAT4)
		pin = std::make_shared<EditorFloat4Pin>();
	else if (type == EditorPinType::INT)
		pin = std::make_shared<EditorIntPin>();
	else if (type == EditorPinType::INT2)
		pin = std::make_shared<EditorInt2Pin>();
	else if (type == EditorPinType::INT3)
		pin = std::make_shared<EditorInt3Pin>();
	else if (type == EditorPinType::INT4)
		pin = std::make_shared<EditorInt4Pin>();
	else
		pin = std::make_shared<EditorPin>();
	return pin;
}

EditorProgramNodePtr NodeEditorWindow::CreateProgramNodePtr(int progId, const ImVec2& pos)
{
	GlProgramPtr pProgram = m_Programs[progId];

	EditorProgramNodePtr node = std::make_shared<EditorProgramNode>();
	node->type = EditorNodeType::PROGRAM;
	node->nodePos = {pos.x, pos.y};
	node->target = pProgram;
	node->framebuffer = m_Framebuffers.size() > 0 ? m_Framebuffers[0] : GlFrameBufferPtr();

	// Flow in & out
	{
		EditorPinPtr pinIn = std::make_shared<EditorPin>();
		pinIn->id = (int)m_Pins.size();
		pinIn->ownerNode = node;
		pinIn->type = EditorPinType::FLOW;
		node->pinsIn.push_back(pinIn);
		node->flowIn = pinIn;
		m_Pins.push_back(pinIn);

		EditorPinPtr pinOut = std::make_shared<EditorPin>();
		pinOut->id = (int)m_Pins.size();
		pinOut->ownerNode = node;
		pinOut->type = EditorPinType::FLOW;
		pinOut->isOutput = true;
		node->pinsOut.push_back(pinOut);
		node->flowOut = pinOut;
		m_Pins.push_back(pinOut);
	}

	// Uniforms
	for (auto uniform : pProgram->GetUniforms())
	{
		EditorPinPtr pin = AllocPin(uniform.var);
		pin->id = (int)m_Pins.size();
		pin->ownerNode = node;
		pin->name = uniform.var.GetName();
		pin->type = EditorNodeUtil::GLTypeToPinType(uniform.var.GetType());
		node->pinsIn.push_back(pin);
		m_Pins.push_back(pin);
		if (pin->type == EditorPinType::IMAGE)
		{
			EditorPinPtr pinOut = std::make_shared<EditorPin>();
			pinOut->id = (int)m_Pins.size();
			pinOut->ownerNode = node;
			pinOut->name = uniform.var.GetName();
			pinOut->type = EditorPinType::IMAGE;
			pinOut->isOutput = true;
			node->pinsOut.push_back(pinOut);
			node->attachmentsPinsStartId++;
			m_Pins.push_back(pinOut);
		}
	}

	// Uniform blocks
	int index = 0;
	for (const GlUniformBlock& uniformBlock : pProgram->GetUniformBlocks())
	{
		EditorBlockPinPtr pin = std::make_shared<EditorBlockPin>();
		pin->id = (int)m_Pins.size();
		pin->ownerNode = node;
		pin->name = uniformBlock.GetName();
		pin->type = EditorPinType::BLOCK;
		pin->blockPinType = EditorBlockPinType::UNIFROM_BLOCK;
		pin->index = index++;
		pin->size = uniformBlock.size();
		node->pinsIn.push_back(pin);
		m_Pins.push_back(pin);
	}

	// Buffer blocks
	index = 0;
	for (const GlBufferBlock& bufferBlock : pProgram->GetBufferBlocks())
	{
		EditorBlockPinPtr pin = std::make_shared<EditorBlockPin>();
		pin->id = (int)m_Pins.size();
		pin->ownerNode = node;
		pin->name = bufferBlock.GetName();
		pin->type = EditorPinType::BLOCK;
		pin->blockPinType = EditorBlockPinType::BUFFER_BLOCK;
		pin->index = index;
		pin->size = bufferBlock.size();
		node->pinsIn.push_back(pin);
		m_Pins.push_back(pin);

		EditorBlockPinPtr pinOut = std::make_shared<EditorBlockPin>();
		pinOut->id = (int)m_Pins.size();
		pinOut->ownerNode = node;
		pinOut->name = bufferBlock.GetName();
		pinOut->type = EditorPinType::BLOCK;
		pinOut->blockPinType = EditorBlockPinType::BUFFER_BLOCK;
		pinOut->index = index++;
		pinOut->size = bufferBlock.size();
		pinOut->isOutput = true;
		node->pinsOut.push_back(pinOut);
		node->attachmentsPinsStartId++;
		m_Pins.push_back(pinOut);
	}

	return node;
}

void NodeEditorWindow::CreateProgramNode(int progId, const ImVec2& pos)
{
	auto node = CreateProgramNodePtr(progId, pos);
	node->id = (int)m_Nodes.size();
	m_Nodes.push_back(node);

	ImNodes::SetNodeScreenSpacePos(node->id, pos);

	m_SelectedItemType = SelectedItemType::PROGRAM_NODE;
	m_SelectedItemId = node->id;
	ImNodes::ClearLinkSelection();
	ImNodes::ClearNodeSelection();
	ImNodes::SelectNode(node->id);
}

void NodeEditorWindow::UpdateProgramNode(int nodeId, int progId)
{
	// Create new node
	ImVec2 pos = {m_Nodes[nodeId]->nodePos.x, m_Nodes[nodeId]->nodePos.y};
	auto node = CreateProgramNodePtr(progId, pos);
	node->id = nodeId;

	// Restore attributes
	EditorProgramNodePtr nodeOld = std::static_pointer_cast<EditorProgramNode>(m_Nodes[nodeId]);
	auto iter = std::find(m_Framebuffers.begin(), m_Framebuffers.end(), nodeOld->framebuffer);
	if (iter != m_Framebuffers.end())
	{
		int index = iter - m_Framebuffers.begin();
		//TODO
		//SetProgramNodeFramebuffer(node, index);
	}
	node->dispatchType = nodeOld->dispatchType;
	node->drawMode = nodeOld->drawMode;
	node->dispatchSize[0] = nodeOld->dispatchSize[0];
	node->dispatchSize[1] = nodeOld->dispatchSize[1];
	node->dispatchSize[2] = nodeOld->dispatchSize[2];

	// Restore pins and links
	for (int i = 0; i < node->pinsIn.size(); i++)
	{
		if (i < nodeOld->pinsIn.size() &&
			nodeOld->pinsIn[i]->type == node->pinsIn[i]->type &&
			nodeOld->pinsIn[i]->size == node->pinsIn[i]->size)
		{
			if (node->pinsIn[i]->type == EditorPinType::FLOAT)
			{
				auto newPin = std::static_pointer_cast<EditorFloatPin>(node->pinsIn[i]);
				auto oldPin = std::static_pointer_cast<EditorFloatPin>(nodeOld->pinsIn[i]);
				newPin->value = oldPin->value;
			}
			else if (node->pinsIn[i]->type == EditorPinType::FLOAT2)
			{
				auto newPin = std::static_pointer_cast<EditorFloat2Pin>(node->pinsIn[i]);
				auto oldPin = std::static_pointer_cast<EditorFloat2Pin>(nodeOld->pinsIn[i]);
				newPin->value[0] = oldPin->value[0];
				newPin->value[1] = oldPin->value[1];
			}
			else if (node->pinsIn[i]->type == EditorPinType::FLOAT3)
			{
				auto newPin = std::static_pointer_cast<EditorFloat3Pin>(node->pinsIn[i]);
				auto oldPin = std::static_pointer_cast<EditorFloat3Pin>(nodeOld->pinsIn[i]);
				newPin->value[0] = oldPin->value[0];
				newPin->value[1] = oldPin->value[1];
				newPin->value[2] = oldPin->value[2];
			}
			else if (node->pinsIn[i]->type == EditorPinType::FLOAT4)
			{
				auto newPin = std::static_pointer_cast<EditorFloat4Pin>(node->pinsIn[i]);
				auto oldPin = std::static_pointer_cast<EditorFloat4Pin>(nodeOld->pinsIn[i]);
				newPin->value[0] = oldPin->value[0];
				newPin->value[1] = oldPin->value[1];
				newPin->value[2] = oldPin->value[2];
				newPin->value[3] = oldPin->value[3];
			}
			else if (node->pinsIn[i]->type == EditorPinType::INT)
			{
				auto newPin = std::static_pointer_cast<EditorIntPin>(node->pinsIn[i]);
				auto oldPin = std::static_pointer_cast<EditorIntPin>(nodeOld->pinsIn[i]);
				newPin->value = oldPin->value;
			}
			else if (node->pinsIn[i]->type == EditorPinType::INT2)
			{
				auto newPin = std::static_pointer_cast<EditorInt2Pin>(node->pinsIn[i]);
				auto oldPin = std::static_pointer_cast<EditorInt2Pin>(nodeOld->pinsIn[i]);
				newPin->value[0] = oldPin->value[0];
				newPin->value[1] = oldPin->value[1];
			}
			else if (node->pinsIn[i]->type == EditorPinType::INT3)
			{
				auto newPin = std::static_pointer_cast<EditorInt3Pin>(node->pinsIn[i]);
				auto oldPin = std::static_pointer_cast<EditorInt3Pin>(nodeOld->pinsIn[i]);
				newPin->value[0] = oldPin->value[0];
				newPin->value[1] = oldPin->value[1];
				newPin->value[2] = oldPin->value[2];
			}
			else if (node->pinsIn[i]->type == EditorPinType::INT4)
			{
				auto newPin = std::static_pointer_cast<EditorInt4Pin>(node->pinsIn[i]);
				auto oldPin = std::static_pointer_cast<EditorInt4Pin>(nodeOld->pinsIn[i]);
				newPin->value[0] = oldPin->value[0];
				newPin->value[1] = oldPin->value[1];
				newPin->value[2] = oldPin->value[2];
				newPin->value[3] = oldPin->value[3];
			}

			for (auto& link : nodeOld->pinsIn[i]->connectedLinks)
			{
				if (link->pPin1 == nodeOld->pinsIn[i])
					link->pPin1 = node->pinsIn[i];
				if (link->pPin2 == nodeOld->pinsIn[i])
					link->pPin2 = node->pinsIn[i];
				node->pinsIn[i]->connectedLinks.push_back(link);
			}
			std::vector<EditorLinkPtr>().swap(nodeOld->pinsIn[i]->connectedLinks);
		}
	}
	for (int i = 0; i < node->pinsOut.size(); i++)
	{
		if (i < nodeOld->pinsOut.size() &&
			nodeOld->pinsOut[i]->type == node->pinsOut[i]->type &&
			nodeOld->pinsOut[i]->size == node->pinsOut[i]->size)
		{
			for (auto& link : nodeOld->pinsOut[i]->connectedLinks)
			{
				if (link->pPin1 == nodeOld->pinsOut[i])
					link->pPin1 = node->pinsOut[i];
				if (link->pPin2 == nodeOld->pinsOut[i])
					link->pPin2 = node->pinsOut[i];
				node->pinsOut[i]->connectedLinks.push_back(link);
			}
			std::vector<EditorLinkPtr>().swap(nodeOld->pinsOut[i]->connectedLinks);
		}
	}

	// Replace the old with the new one
	m_nodeGraph->getNodeById(nodeId)->disconnectAllPins();
	m_Nodes[nodeId].reset();
	m_Nodes[nodeId] = node;
}

void NodeEditorWindow::CreateTextureNode(int textureId, const ImVec2& pos)
{
	EditorTextureNodePtr node = std::make_shared<EditorTextureNode>();
	node->type = EditorNodeType::TEXTURE;
	node->nodePos = {pos.x, pos.y};
	node->target = m_Textures[textureId];

	EditorPinPtr pin = std::make_shared<EditorPin>();
	pin->id = (int)m_Pins.size();
	pin->ownerNode = node;
	pin->name = "";
	pin->type = EditorPinType::TEXTURE;
	pin->isOutput = true;
	node->pinsOut.push_back(pin);
	m_Pins.push_back(pin);

	node->id = (int)m_Nodes.size();
	m_Nodes.push_back(node);

	ImNodes::SetNodeScreenSpacePos(node->id, pos);

	m_SelectedItemType = SelectedItemType::NODE;
	m_SelectedItemId = node->id;
	ImNodes::ClearLinkSelection();
	ImNodes::ClearNodeSelection();
	ImNodes::SelectNode(node->id);
}

void NodeEditorWindow::CreateTimeNode(const ImVec2& pos)
{
	EditorNodePtr node = std::make_shared<EditorNode>();
	node->type = EditorNodeType::TIME;
	node->nodePos = {pos.x, pos.y};

	EditorPinPtr pin = std::make_shared<EditorPin>();
	pin->ownerNode = node;
	pin->type = EditorPinType::FLOAT;
	pin->isOutput = true;
	pin->id = (int)m_Pins.size();
	node->pinsOut.push_back(pin);
	m_Pins.push_back(pin);

	node->id = (int)m_Nodes.size();
	m_Nodes.push_back(node);

	ImNodes::SetNodeScreenSpacePos(node->id, pos);

	m_SelectedItemType = SelectedItemType::NODE;
	m_SelectedItemId = node->id;
	ImNodes::ClearLinkSelection();
	ImNodes::ClearNodeSelection();
	ImNodes::SelectNode(node->id);
}

void NodeEditorWindow::CreateMousePosNode(const ImVec2& pos)
{
	EditorNodePtr node = std::make_shared<EditorNode>();
	node->type = EditorNodeType::MOUSE_POS;
	node->nodePos = {pos.x, pos.y};

	EditorPinPtr pin = std::make_shared<EditorPin>();
	pin->ownerNode = node;
	pin->type = EditorPinType::FLOAT2;
	pin->isOutput = true;
	pin->id = (int)m_Pins.size();
	node->pinsOut.push_back(pin);
	m_Pins.push_back(pin);

	node->id = (int)m_Nodes.size();
	m_Nodes.push_back(node);

	ImNodes::SetNodeScreenSpacePos(node->id, pos);

	m_SelectedItemType = SelectedItemType::NODE;
	m_SelectedItemId = node->id;
	ImNodes::ClearLinkSelection();
	ImNodes::ClearNodeSelection();
	ImNodes::SelectNode(node->id);
}
